  >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry



    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>


    >>> 'area' in dir(BaseGeometry)
    True

    >>> 'integer_validator' in dir(BaseGeometry)
    True

Should test publicity of methods
    >>> BaseGeometry.area	#doctest: +ELLIPSIS
    <function BaseGeometry.area at 0x...>

    >>> bg.integer_validator	#doctest: +ELLIPSIS
    <bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry object at 0x...>>

And no instance attributes or methods
    >>> dir(bg) == dir(BaseGeometry)
    True

Test ``area``
-------------
It is not implemented
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented



Test ``integer_validator``
--------------------------
Integer takes in 2 arguments

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator(1)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator(1, 2, 3)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given